
@Service
public class DefaultInternalAPI implements InternalAPI {

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DokkerImageService dockerImageService;

    @Autowired
    private DokkerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DokkerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDokkerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DokkerImagesFront findDockerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DokkerImageTagsFront getDockerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DokkerContainersFront getAllDockerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDokkerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DokkerNetworksFront getActiveDockerNetworks(String serverInstanceId) {
        return new DokkerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DokkerCleaner;
import works.buddy.ws.docker.services.DokkerHubProxy;
import works.buddy.ws.docker.services.DokkerImageService;
import works.buddy.ws.docker.view.model.DokkerImageTagsFront;
import works.buddy.ws.docker.view.model.DokkerImagesFront;
import works.buddy.ws.docker.view.model.DokkerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DokkerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DokkerImageService dockerImageService;

    @Autowired
    private DokkerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DokkerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDokkerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DokkerImagesFront findDockerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DokkerImageTagsFront getDockerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DokkerContainersFront getAllDockerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDokkerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DokkerNetworksFront getActiveDockerNetworks(String serverInstanceId) {
        return new DokkerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DokkerCleaner;
import works.buddy.ws.docker.services.DokkerHubProxy;
import works.buddy.ws.docker.services.DokkerImageService;
import works.buddy.ws.docker.view.model.DokkerImageTagsFront;
import works.buddy.ws.docker.view.model.DokkerImagesFront;
import works.buddy.ws.docker.view.model.DokkerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DokkerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DokkerImageService dockerImageService;

    @Autowired
    private DokkerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DokkerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDokkerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DockerImageService dockerImageService;

    @Autowired
    private DockerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DockerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDockerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DockerImageService dockerImageService;

    @Autowired
    private DockerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DockerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDockerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DockerImageService dockerImageService;

    @Autowired
    private DockerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DockerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDockerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DockerImageService dockerImageService;

    @Autowired
    private DockerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DockerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDockerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    @Override
    // security not required - for internal use
    @Validate(validators = {StringValidator.class})
    public ExecutionFront getFailedExecutionLogs(String executionId) throws AccessException {
        return executionService.getFailedExecutionLogs(executionId);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;

@Service
public class DefaultInternalAPI implements InternalAPI {

    @Autowired
    private SmtpTester smtpTester;

    @Autowired
    private UserService userService;

    @Autowired
    private WorkspaceMemberService workspaceMemberService;

    @Autowired
    private UserAdministrationService userAdministrationService;

    @Autowired
    private StandaloneUserService standaloneUserService;

    @Autowired
    private WorkspaceService workspaceService;

    @Autowired
    private SSOManager ssoManager;

    @Autowired
    private SSOSynchronizationService ssoSynchronizationService;

    @Autowired
    private MinerBlockingService minerBlockingService;

    @Autowired
    private GroupService groupService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ProjectMembershipManager projectMembershipManager;

    @Autowired
    private RefViewer refViewer;

    @Autowired
    private ChangeSetCreator changeSetCreator;

    @Autowired
    private CommitMaker commitMaker;

    @Autowired
    private DiffService diffService;

    @Autowired
    private RepositoryManager repositoryManager;

    @Autowired
    private RepositoryContentViewer repositoryContentViewer;

    @Autowired
    private JobService jobService;

    @Autowired
    private BrandingService brandingService;

    @Autowired
    private FeedService feedService;

    @Autowired
    private PipelineHistoryService pipelineHistoryService;

    @Autowired
    private AggregateDataService aggregateDataService;

    @Autowired
    private ApiClientViewService apiClientViewService;

    @Autowired
    private PersonalTokenService personalTokenService;

    @Autowired
    private ProjectNatureDetector projectNatureDetector;

    @Autowired
    private TechStackDetector techStackDetector;

    @Autowired
    private ApplicationEnvironmentService applicationEnvironmentService;

    @Autowired
    private PipelineService pipelineService;

    @Autowired
    private PipelineUpdater pipelineUpdater;

    @Autowired
    private PipelineUsageService pipelineUsageService;

    @Autowired
    private OpenSourceProxy openSourceProxy;

    @Autowired
    private DeploymentActionService deploymentActionService;

    @Autowired
    private ExecutionService executionService;

    @Autowired
    private ExecutionTerminator executionTerminator;

    @Autowired
    private ActionExecutionLogService actionExecutionLogService;

    @Autowired
    private CustomActionDefinitionService customActionDefinitionService;

    @Autowired
    private PipelineExecutor pipelineExecutor;

    @Autowired
    private DockerImageService dockerImageService;

    @Autowired
    private DockerHubProxy dockerHubProxy;

    @Autowired
    private BuildWorkspaceService buildWorkspaceService;

    @Autowired
    private PermissionSetService permissionSetService;

    @Autowired
    private FolderService folderService;

    @Autowired
    private UploadService uploadService;

    @Autowired
    private BranchService branchService;

    @Autowired
    private GitTagService gitTagService;

    @Autowired
    private MergeSuggestionService mergeSuggestionService;

    @Autowired
    private AccountancyService accountancyService;

    @Autowired
    private PaymentCardService paymentCardService;

    @Autowired
    private SshKeyService sshKeyService;

    @Autowired
    private GuideService guideService;

    @Autowired
    private WebhookService webhookService;

    @Autowired
    private MergeRequestService mergeRequestService;

    @Autowired
    private IntegrationService integrationService;

    @Autowired
    private IntegrationActionService integrationActionService;

    @Autowired
    private GitWebhookService gitWebhookService;

    @Autowired
    private ProjectIntegrationService projectIntegrationService;

    @Autowired
    private IntegrationAccessService integrationAccessService;

    @Autowired
    private TelegramClient telegramClient;

    @Autowired
    private EvictCacheService evictCacheService;

    @Autowired
    private BillingService billingService;

    @Autowired
    private InvoiceService invoiceService;

    @Autowired
    private WorkspaceActivityJob workspaceActivityJob;

    @Autowired
    private ExecutionStatsProvider executionStatsProvider;

    @Autowired
    private LicenseService licenseService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private VariableService variableService;

    @Autowired
    private Blacklist blacklist;

    @Autowired
    private AWSMarketplaceService awsMarketplaceService;

    @Autowired
    private InactiveWorkspaceTerminator inactiveWorkspaceTerminator;

    @Autowired
    private TerminatedWorkspacesCleaner terminatedWorkspacesCleaner;

    @Autowired
    private DockerCleaner dockerCleaner;

    @Autowired
    private PipelineYamlService pipelineYamlService;

    @Autowired
    private PipelineYamlUpdater pipelineYamlUpdater;

    @Autowired
    private MigrateVariablesService migrateVariablesService;

    @Autowired
    private KubernetesService kubernetesService;

    @Autowired
    private LDAPService ldapService;

    @Autowired
    private ServerInstanceManager serverInstanceManager;

    @Autowired
    private GitServerRegistry gitServerRegistry;

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private OAuth2Service oAuth2Service;

    @Autowired
    private RunnerViewService runnerViewService;

    @Autowired
    private RunnerService runnerService;

    @Autowired
    private ExecutionThreadManager executionThreadManager;

    @Autowired
    private SandboxService sandboxService;

    @Autowired
    private SandboxSnapshotService sandboxSnapshotService;

    @Autowired
    private SandboxOperator sandboxOperator;

    @Autowired
    private ExportUserService exportUserService;

    @Autowired
    private TagService tagService;

    @Autowired
    private LxdPlaybookDAO lxdPlaybookDAO;

    @Autowired
    private SandboxSubdomainGenerator sandboxSubdomainGenerator;

    @Autowired
    private SandboxBrowser sandboxBrowser;

    @Autowired
    private VisualTestsImageLoader visualTestsImageLoader;

    @Autowired
    private AndroidActionService androidActionService;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private BuildServerRegistry buildServerRegistry;

    @Autowired
    private ApiServerRegistry apiServerRegistry;

    @Autowired
    private XcodeProjectHelper xcodeProjectHelper;

    @Autowired
    private ProjectFrontService projectFrontService;

    @Autowired
    private MacSignPropertyListSource macSignPropertyListSource;

    @Autowired
    private CustomDomainService customDomainService;

    @Autowired
    private OAuth2TokenExpirationService oAuth2TokenExpirationService;

    @Autowired
    private MacVersionsService macVersionsService;

    @Autowired
    private WorkspaceMessageService workspaceMessageService;

    @Autowired
    private InternalNotificationService internalNotificationService;

    @Autowired
    private DefaultPipelineFilesystemFetcher pipelineFilesystemFetcher;

    @Value("${api_server_id}")
    private String apiServerId;

    @Override
    public AppInfo getAppInfo() {
        return applicationEnvironmentService.getAppInfo();
    }

    @Override
    public Success cleanProjects() {
        terminatedWorkspacesCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public Success cleanDockerImages() {
        dockerCleaner.cleanInThread();
        return new Success();
    }

    @Override
    public ExecutionThreadsStatsFront getExecutionThreadsStats() {
        return executionThreadManager.getExecutionThreadsStats();
    }

    // user

    @Override
    // security not required - global method, nothing to validate
    public ForbiddenNamesFront getForbiddenNames() {
        return new ForbiddenNamesFront(ForbiddenConstants.workspaces, ForbiddenConstants.projects);
    }

    @Override
    // security not required - global method, nothing to validate
    public ZonesFront getAvailableZones() {
        return new ZonesFront(ZoneId.getAvailableZoneIds());
    }

    @Override
    @Validate(validators = {LoginUserValidator.class, StringValidator.class, DomainValidator.class})
    public UserFront loginUserToDomain(UserFront user, String ipAddress, String domain) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.loginUserToDomain(user, domain);
    }

    @Override
    @Validate(validators = {LoginUserValidator.class})
    public UserFront login(UserFront user, String ipAddress) throws CommonException {
        user.ipAddress = ipAddress;
        return userService.login(user);
    }

    @Override
    @Validate(validators = {IsPasswordValidValidator.class, StringValidator.class})
    public ValidFront isValidPassword(UserFront user, String ipAddress, String domain) throws CommonException, AccessException {
        return userService.isValidPassword(user, ipAddress, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestSmtpValidator.class, EmptyValidator.class, IdValidator.class})
    public Success testSmtp(SmtdTestFront smtpTestFront, String domain, Integer invokerId) throws CommonException {
        return smtpTester.sendEmail(smtpTestFront, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success confirmInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.confirmInvitation(domain, invokerId);

    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success rejectInvitation(String domain, Integer invokerId) throws CommonException {
        return userService.rejectInvitation(domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront getUserByInvokerId(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.getUserById(invokerId, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public UserFront getUserByIdDeveloperMode(Integer userId, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return userService.getUserByIdDeveloperMode(userId, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class})
    public ExistentFront isUserEmailExistent(String email) throws CommonException {
        return userService.isUserEmailExistent(email);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ExportedUsersFront getExportedUsers(String domain, Integer invokerId) throws CommonException {
        return exportUserService.getExportedUsers(invokerId, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserValidator.class, StringValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserPersonalDetails(UserFront user, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return userService.updateUserPersonalDetails(user, ipAddress, domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public UserFront updateStandaloneAdminFlag(UserFront user, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.updateStandaloneAdminFlag(user, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {IdValidator.class})
    public UsersFront getStandaloneUsers(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return standaloneUserService.getStandaloneUsers(invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateUserExternalUserNameValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public UserFront updateUserExternalUserName(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userService.updateUserExternalUserName(user, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserEmailValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateWorkspaceMemberEmail(UserEmailFront emailFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return workspaceMemberService.updateWorkspaceMemberEmail(emailFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserByAdmin(UpdateUserByAdminFront front, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserByAdmin(front, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserAutoAssignToNewProjectValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateUserAutoAssignToNewProject(UserFront user, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateUserAutoAssignToNewProject(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateUserWorkspaceAdminValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront updateAdminFlag(UserFront user, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return userAdministrationService.updateAdminFlag(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantAccessToAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.grantAccessToAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success grantGroupAccessToAllProjects(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.grantGroupAccessToAllProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeAccessInProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeAccessInProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeGroupAccessInProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.changeGroupAccessInProjects(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUserFromAllProjects(UserFront user, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteUserFromAllProjects(user, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {GroupWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroupFromAllProjects(GroupFront group, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteGroupFromAllProjects(group, domain, invokerId);
    }

    @Override
    // security not required - invoke on login
    @Validate(validators = {EmailValidator.class})
    public UserMessageFront resetUserPassword(String email, String ipAddress) throws CommonException {
        return userService.resetPassword(email, ipAddress);
    }

    @Override
    // security not required
    @Validate(validators = {EmailValidator.class, IdValidator.class})
    public UserMessageFront resendEmailConfirmation(String email, Integer invokerId, String ipAddress) throws NotFoundException, AccessException {
        return userService.resendEmailConfirmation(email, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success resendInvitation(UserFront front, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return userService.resendInvitation(front, domain, invokerId);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {ChangePasswordRequestValidator.class, StringValidator.class, AllowNullDomainValidator.class})
    public UserFront confirmResetPassword(ChangePasswordRequest confirmResetPassword, String ipAddress, String domain) throws CommonException {
        return userService.confirmResetPassword(confirmResetPassword, domain, ipAddress);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddPermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront addPermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.addPermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront updatePermissionSet(PermissionSetFront permissionSet, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.updatePermissionSet(permissionSet, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePermissionSet(Integer permissionSetId, Integer newPermissionSetId, String domain, Integer invokerId) throws CommonException {
        return permissionSetService.deletePermissionSet(permissionSetId, newPermissionSetId, invokerId, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddPublicSSHKeyValidator.class, StringValidator.class, IdValidator.class})
    public PublicSSHKeyFront addPublicSSHKey(PublicSSHKeyFront publicSshKey, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.addKey(publicSshKey, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public PublicSSHKeyFront getPublicSSHKey(Integer keyId, Integer invokerId) throws NotFoundException {
        return sshKeyService.getKey(keyId, invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {UpdatePublicSSHKeyValidator.class, IdValidator.class})
    public PublicSSHKeyFront updatePublicSSHKey(PublicSSHKeyFront publicSshKey, Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.updateKey(publicSshKey, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PublicSSHKeysFront getPublicSSHKeys(Integer invokerId) throws CommonException, NotFoundException {
        return sshKeyService.getKeys(invokerId);
    }

    @Override
    // security not required - in my id, validate by owner
    @Validate(validators = {IdValidator.class, StringValidator.class, IdValidator.class})
    public Success deletePublicSSHKey(Integer keyId, String ipAddress, Integer invokerId) throws NotFoundException, CommonException {
        sshKeyService.deleteKey(keyId, invokerId, ipAddress);
        return new Success(Messages.msg_4201());
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public SSHKeysFront generateSSHKeyPair(String passphrase, String ipAddress, Integer invokerId) throws CommonException {
        return sshKeyService.generateSSHKeyPair(passphrase, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Response getSSHKeyPairFile(Integer invokerId) throws AccessException, NotFoundException {
        return sshKeyService.getSSHKeyPairFile(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AvatarValidator.class, IdValidator.class})
    public UserFront addUserAvatar(Avatar avatar, Integer invokerId) throws CommonException {
        return brandingService.addUserAvatar(avatar, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public UserFront deleteUserAvatar(Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return brandingService.deleteUserAvatar(invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterWorkspaceValidator.class, StringValidator.class, IdValidator.class})
    public WorkspaceFront addWorkspace(Registration registration, String ipAddress, Integer invokerId) throws CommonException {
        return workspaceService.addWorkspace(registration, ipAddress, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUserValidator.class, DomainValidator.class, IdValidator.class})
    public UserFront inviteUser(Member member, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUser(member, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersValidator.class, DomainValidator.class, IdValidator.class})
    public UsersFront inviteUsers(MembersFront members, String domain, Integer invokerId) throws CommonException {
        return userService.inviteUsers(members, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteUsersToGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupMembersFront inviteUsersToGroup(GroupMembersFront groupMembersFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return userService.inviteUsersToGroup(groupMembersFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteToProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectMembersGroupsFront inviteToProject(ProjectMembersGroupsFront projectMembersGroupsFront, String domain, Integer invokerId) {
        return userService.inviteToProject(projectMembersGroupsFront, domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront registerByExternal(Registration registration) throws CommonException {
        return userService.registerByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByExternalValidator.class})
    public UserFront loginByExternal(Registration registration) throws CommonException {
        return userService.loginByExternal(registration);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront registerByEmail(Registration registration) throws CommonException {
        return userService.registerByEmail(registration);
    }

    @Override
    // security not required - validation delegated to front #1u9xug1
    @Validate(validators = {RegisterByEmailForSSOValidator.class})
    public UserFront registerByEmailForSSO(Registration registration) throws CommonException {
        return userService.registerByEmailForSSO(registration);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, StringValidator.class})
    public UserFront updateUserRegisterWorkspaceViaApiTokenDeveloperMode(Integer userId, Boolean registerViaApiToken, String token)
            throws AccessException, NotFoundException {
        return userService.updateRegisterWorkspaceViaApiTokenDeveloperMode(userId, registerViaApiToken);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public AccessTokenFront registerAndCreateAccessTokenDeveloperMode(Registration registration, String token) throws CommonException {
        return userService.registerAndCreateAccessTokenDeveloperMode(registration);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success updateSid(String sid, Integer invokerId) throws CommonException {
        return userService.updateSid(sid, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {RegisterByEmailValidator.class})
    public UserFront createUser(Registration registration) throws CommonException {
        return userService.createUser(registration);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public UserFront getUserByToken(String token) throws NotFoundException, CommonException {
        return userService.getUserByToken(token);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteUserValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteUser(Member member, String domain, Integer invokerId) throws CommonException {
        userService.deleteUser(member, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PermissionSetFront getProjectPermissionSet(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectPermissionSet(projectId, invokerId, domain);
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public UsersFront getLdapUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return ldapService.getLdapUsers();
    }

    @Override
    @Standalone
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {InviteLdapUsersValidator.class, DomainValidator.class, IdValidator.class})
    public Success inviteLdapUsers(UsersFront usersFront, String domain, Integer invokerId) throws CommonException {
        return ldapService.inviteLdapUsers(usersFront, domain, invokerId);
    }

    // UserEmail

    @Override
    // security not required - in my id
    @Validate(validators = {AddUserEmailValidator.class, StringValidator.class, IdValidator.class})
    public UserEmailFront addUserEmail(UserEmailFront userEmail, String ipAddress, Integer invokerId) throws CommonException {
        return userService.addUserEmail(userEmail, ipAddress, invokerId, true);
    }

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public UserEmailFront confirmUserEmail(String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmail(token);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public UserEmailFront confirmUserEmailDeveloperMode(String email, String token) throws NotFoundException, CommonException, AccessException {
        return userService.confirmUserEmailDeveloperMode(email);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserOriginDeveloperMode(User.Origin origin, Integer userId, String token) throws NotFoundException, AccessException, CommonException {
        return userService.changeUserOriginDeveloperMode(origin, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, IdValidator.class, StringValidator.class})
    public Success changeUserCreateDateDeveloperMode(String createDate, Integer userId, String token)
            throws NotFoundException, AccessException, CommonException {
        return userService.changeUserCreateDateDeveloperMode(createDate, userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateTerminationDateDeveloperMode(String terminationDate, String domain, String token)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateTerminationDateDeveloperMode(terminationDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success updateDeleteReasonDeveloperMode(String reason, String domain, String token) throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateDeleteReasonDeveloperMode(reason, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class})
    public Success replaceIpDeveloperMode(String fromIp, String toIp, String token) throws CommonException, AccessException {
        workspaceService.replaceIpDeveloperMode(fromIp, toIp);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class})
    public Success deleteUserWithTerminateWorkspacesDeveloperMode(String email, String token) throws IOException, CommonException {
        return userService.deleteUserWithTerminateWorkspacesDeveloperMode(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ReplaceUserEmailFrontValidator.class, IdValidator.class})
    public Success replaceUserEmail(ReplaceUserEmailFront replaceUserEmailFront, Integer invokerId) throws CommonException {
        return userService.replaceUserEmail(replaceUserEmailFront, invokerId);
    }

    // authentication

    @Override
    // security not required - in my id
    @Validate(validators = {EnableSmsAuthenticationValidator.class, IdValidator.class})
    public Success enableSmsAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableSmsAuthentication(invokerId, authenticationCode.phone, authenticationCode.phoneAreaCode);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmSmsAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableSmsAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableSmsAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public Success resendSmsAuthentication(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.resendSmsAuthentication(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront generateRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.generateRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public AuthenticationCodesFront getRecoveryCodes(Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.getRecoveryCodes(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public AuthenticationCodeFront enableTotpAuthentication(AuthenticationCodeFront authenticationCode, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.enableTotpAuthentication(authenticationCode, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront confirmTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.confirmTotpAuthentication(invokerId, authenticationCode.code, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront disableTotpAuthentication(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.disableTotpAuthentication(invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmailValidator.class})
    public AuthenticationCodeFront getDefaultAuthenticationMethod(String email) throws AccessException, CommonException {
        return twoFactorAuthenticationService.getDefaultAuthenticationMethod(email);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, StringValidator.class, IdValidator.class})
    public UserFront changeDefaultAuthenticationMethod(AuthenticationCodeFront authenticationCode, String ipAddress, Integer invokerId) throws CommonException {
        return twoFactorAuthenticationService.changeDefaultAuthenticationMethod(authenticationCode, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CodeFront getLastTwoFactorCodeDeveloperMode(Integer userId, String token) throws CommonException, AccessException {
        return twoFactorAuthenticationService.getLastTwoFactorCodeDeveloperMode(userId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {EmptyValidator.class, IdValidator.class, IdValidator.class})
    public Success disableTwoFactorAuthenticationByStandaloneOwner(AuthenticationCodeFront authenticationCodeFront, Integer userId, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        twoFactorAuthenticationService.disableTwoFactorAuthenticationByStandaloneOwner(authenticationCodeFront, userId, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success disableTwoFactorByAdmin(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        twoFactorAuthenticationService.disableTwoFactorByAdmin(userFront.id, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspace(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.updateWorkspace(workspace, domain, invokerId);
    }

    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public WorkspaceFront updateWorkspaceInDeveloperMode(WorkspaceFront.FeatureFlagUpdate update, String domain, String token) throws CommonException {
        return workspaceService.updateWorkspaceInDeveloperMode(domain, update);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success terminateWorkspace(String domain, Integer invokerId) throws CommonException {
        workspaceService.terminateWorkspace(domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success markWorkspaceAsMinerDeveloperMode(String domain, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.markWorkspaceAsMinerDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success unMarkAsMinerDeveloperMode(Integer invokerId, String token) throws NotFoundException, AccessException, CommonException {
        return minerBlockingService.unMarkAsMinerDeveloperMode(invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspaceOwnerValidator.class, DomainValidator.class, IdValidator.class})
    public Success changeOwner(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        workspaceService.changeOwner(workspace.owner.id, domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public OwnerFront getNewOwnerByToken(String token) throws NotFoundException, CommonException {
        return userService.getNewOwnerByToken(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success rejectChangeOwner(String token) throws NotFoundException, CommonException {
        return workspaceService.rejectChangeOwner(token);
    }

    @Override
    // security not required - validated by token
    @Validate(validators = {EmptyValidator.class})
    public Success confirmChangeOwner(String token) throws CommonException {
        return workspaceService.confirmChangeOwner(token);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceDomain(WorkspaceFront workspace, String domain, Integer invokerId) throws CommonException {
        return workspaceService.changeDomain(workspace.domain, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateWorkspaceColour(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.updateWorkspaceColour(workspace.colour, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, DomainValidator.class, StringValidator.class})
    public Success changeDomainDeveloperMode(String domain, String newDomain, String token) throws AccessException, CommonException, NotFoundException {
        return workspaceService.changeDomainDeveloperMode(domain, newDomain);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceByDomain(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspace(domain, invokerId);
    }

    @Override
    // security not required - workspace not exists
    @Validate(validators = {DomainValidator.class})
    public WorkspaceFront checkWorkspaceExist(String domain) throws NotFoundException, CommonException {
        return workspaceService.checkWorkspaceExist(domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {FromValidator.class, LimitValidator.class, SortTypeValidator.class, SortByValidator.class, StringValidator.class,
            IdValidator.class})
    public WorkspacesFront getWorkspacesByUser(Integer from, Integer limit, SortType sortType, String sortBy, String ipAddress, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return workspaceService.getWorkspaceByUser(invokerId, from, limit, sortType, sortBy, ipAddress);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    public AccessLogsFront getAccessLogs(Integer userId, Integer groupId, Integer projectId, AccessLog.Status status, AccessLog.AccessType accessType,
            Integer from, Integer limit, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return workspaceService.getAccessLogs(userId, groupId, projectId, status, accessType, from, limit, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOSessionDurationValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront updateSSOSessionDuration(WorkspaceFront workspace, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOSessionDuration(workspace.ssoSessionDuration, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EnableSSOValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSO(SSOFront sso, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.enableSSO(sso, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSO(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront enableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.enableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceFront disableSSORequired(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.disableSSORequired(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SSOFront getSSO(String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return ssoManager.getSSO(domain, true);
    }

    @Override
    // security not required - public access
    @Validate(validators = {DomainValidator.class})
    public SSOFront getAuthSSO(String domain) throws CommonException, NotFoundException {
        return ssoManager.getSSO(domain, false);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateSSOBotValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateSSOBot(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.updateSSOBot(userFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberWithoutConfirmedEmailAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success startSSOSession(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.startSSOSession(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success bindUserWithSSO(SSOIdFront ssoIdFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.bindUserWithSSO(ssoIdFront.ssoId, domain, invokerId, GroupSyncSupervisor.SyncTrigger.LOGIN);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UserWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success unbindUserWithSSO(UserFront userFront, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.unbindUserWithSSO(userFront.id, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront generateSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.generateSSORecoveryCodes(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CodesFront getSSORecoveryCodes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getSSORecoveryCodes(domain, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public BooleanFront isAnySSOWorkspace() throws CommonException, AccessException {
        return new BooleanFront(ssoManager.isAnySSOWorkspace());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront getWorkspaceBySSORecoveryCode(String code, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoManager.getWorkspaceBySSORecoveryCode(code, domain);
    }

    @Override
    @Validate(validators = {StringValidator.class, DomainValidator.class})
    public UserFront getUserBySSO(String ssoId, String domain) throws NotFoundException, CommonException, AccessException {
        return ssoManager.getUserBySSO(ssoId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {SSOIntegrationSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public SSOSynchronizationFront updateSSOSynchronization(SSOSynchronizationFront settings, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.updateSSOSynchronization(settings, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public Success syncSSOGroups(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return ssoSynchronizationService.syncSSOGroups(domain, invokerId, GroupSyncSupervisor.SyncTrigger.MANUAL);
    }

    // group

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront addGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.addGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateGroupValidator.class, DomainValidator.class, IdValidator.class})
    public GroupFront updateGroup(GroupFront group, String domain, Integer invokerId) throws CommonException {
        return groupService.updateGroup(group, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGroup(Integer groupId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return groupService.deleteGroup(groupId, invokerId, domain);
    }

    // project

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectByDisplayName(project, true, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProject(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectIntegration(ProjectFront project, String domain, Integer invokerId)
            throws NotFoundException, CommonException, CommonException, AccessException {
        return projectService.updateProjectIntegration(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateYamlEnabled(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateYamlEnabled(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateCustomProject(ProjectFront project, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return projectService.updateCustomProject(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectSubmoduleSettingsValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectSubmoduleSettings(ProjectFront project, String domain, Integer invokerId) throws CommonException {
        return projectService.updateProjectSubmoduleSettings(project, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectByName(String projectName, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectWithRepositoryDetails(domain, invokerId, projectName);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ProjectFront getProjectById(Integer projectId, Boolean withDetails, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return openSourceProxy.getProjectWithRepositoryDetails(domain, invokerId, projectId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByUser(String domain, Integer invokerId) throws NotFoundException {
        return projectService.getProjectsByUser(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsByIntegration(String hashId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return projectService.getProjectsByIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront addProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId) throws CommonException {
        return projectMembershipManager.addProjectGroup(projectGroup, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectGroupFront updatePermissionSetInProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.updatePermissionSetInProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectGroupValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProjectGroup(ProjectGroupFront projectGroup, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectMembershipManager.deleteProjectGroup(projectGroup, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePermissionSetInProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success updatePermissionSetInProject(ProjectMemberFront projectMember, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        WorkspaceMember workspaceMember = new WorkspaceMember();
        workspaceMember.setUser(new User(projectMember.user.id));
        ProjectMember pm = new ProjectMember(new Project(projectMember.project.id), workspaceMember, new PermissionSet(projectMember.permissionSet.id));
        return projectMembershipManager.updatePermissionSetInProject(pm, domain, invokerId, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteProject(Integer projectId, String ipAddress, String domain, Integer invokerId) throws CommonException {
        return projectService.deleteProject(projectId, domain, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateProjectStarrValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updateProjectStar(ProjectFront project, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return projectService.updateProjectStar(project, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, EmptyValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public ProjectNaturesFront getProjectNatures(Integer projectId, String branch, String path, Boolean all, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return projectNatureDetector.detect(projectId, branch, domain, invokerId, path, isTrue(all));
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public TechStackFront getTechStack(String domain, String token) throws CommonException, AccessException {
        return techStackDetector.detect(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront addFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.addFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteFolder(Integer folderId, String domain, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return folderService.deleteFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront updateFolder(FolderFront folder, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolder(folder, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateFolderPriorityOrderValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront updateFolderPriorityOrder(FoldersFront foldersFront, String domain, Integer invokerId) throws CommonException {
        return folderService.updateFolderPriorityOrder(foldersFront, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FolderFront getFolder(Integer folderId, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return folderService.getFolder(folderId, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FolderTypeValidator.class, IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public FoldersFront getFolders(String type, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return folderService.getFolders(Folder.Type.valueOf(type), projectId, invokerId, domain);
    }

    // standalone runners

    @Override
    // security not required - for standalone only
    @Standalone
    public RunnersFront getRunners() throws CommonException, AccessException {
        return new RunnersFront(runnerViewService.getRunners());
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {RegisterRunnerValidator.class})
    public RunnerFront registerRunner(RunnerFront runner) throws CommonException {
        return runnerService.registerRunner(runner);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {TestRunnerValidator.class})
    public RunnerInfo testRunner(RunnerFront runner) throws CommonException, NotFoundException, AccessException {
        return runnerService.testRunner(runner.id);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    public Success updateRunnersLoad() {
        runnerService.updateRunnersLoad();
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {UpdateRunnerValidator.class})
    public Success updateRunner(RunnerFront runner) throws CommonException {
        runnerService.updateRunner(runner);
        return new Success();
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {IdValidator.class})
    public Success deleteRunner(Integer runnerId, Boolean force) throws NotFoundException, AccessException, CommonException {
        runnerService.deleteRunner(runnerId, force);
        return new Success();
    }

    // SCM

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, IdAllowNullValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public Entry getRepositoryContent(Integer projectId, String path, String revision, Integer pipelineId, Boolean withPathsInfo, String domain,
            Integer invokerId) throws NotFoundException, AccessException, CommonException, WrongRefException {
        return repositoryContentViewer.getRepositoryContent(projectId, path, revision, pipelineId, withPathsInfo != null ? withPathsInfo : false, domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionsFront getRevisions(Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return refViewer.getRevisions(projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public FileEntry getFileContent(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, NotRegularFileException, CommonException, WrongRefException {
        return repositoryContentViewer.getFileContent(projectId, path, revision, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public Response getRepositoryFile(Integer projectId, String path, String revision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return repositoryContentViewer.getRepositoryFile(projectId, path, revision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, PathValidator.class, EmptyValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitHistory(Integer projectId, String branch, String path, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitHistory(projectId, branch, path, null, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitByQuery(Integer projectId, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return refViewer.getCommitsByQuery(projectId, query, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, QueryValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getPathsByQuery(Integer projectId, String branch, String query, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getPathsByQuery(projectId, query, branch, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByRevisions(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByRevisions(invokerId, domain, projectId, path, null, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, FromValidator.class, LimitValidator.class,
            DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, Integer from, Integer limit,
            String domain, Integer invokerId) throws CommonException {
        return refViewer.getCommitComparisonForMergeRequest(invokerId, domain, projectId, path, fromRevision, toRevision, from, limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, BranchNameValidator.class, BranchNameValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public CommitsFront getCalamitComparisonByDates(Integer projectId, String fromBranch, String toBranch, String path, String fromDate, String toDate,
            Integer limit, Integer from, String domain, Integer invokerId) throws CommonException, DiffException, WrongRefException {
        return refViewer.getCommitComparisonByDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenRevisions(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws NotFoundException, DiffException, AccessException {
        return diffService.getDiffsBetweenRevisions(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, PathValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsForMergeRequest(Integer projectId, String oldRevision, String newRevision, String path, Integer from, Integer limit,
            Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws AccessException, DiffException, NotFoundException {
        return diffService.getDiffsForMergeRequest(projectId, oldRevision, newRevision, path, from, limit, isTrue(full), isTrue(sideBySide),
                isTrue(ignoreWhitespaces), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, EmptyValidator.class, DateTimeValidator.class,
            DateTimeValidator.class, FromValidator.class, DiffLimitValidator.class, BooleanValidator.class, BooleanValidator.class, BooleanValidator.class,
            DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationsBetweenDates(Integer projectId, String path, String fromBranch, String toBranch, String fromDate, String toDate, Integer from,
            Integer limit, Boolean full, Boolean sideBySide, Boolean ignoreWhitespaces, String domain, Integer invokerId)
            throws DiffException, CommonException {
        return diffService.getDiffsBetweenDates(invokerId, domain, projectId, fromBranch, toBranch, path, DateTimeRange.fromStrings(fromDate, toDate), from,
                limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, StringValidator.class, FromValidator.class, DiffLimitValidator.class,
            BooleanValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public FileDiffFront getDifferentiationForCommit(Integer projectId, String path, String revision, Integer from, Integer limit, Boolean full, Boolean sideBySide,
            Boolean ignoreWhitespaces, String domain, Integer invokerId) throws CommonException {
        return diffService.getDiffForCommit(projectId, path, revision, from, limit, isTrue(full), isTrue(sideBySide), isTrue(ignoreWhitespaces), domain,
                invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public BlameResultsFront getBlameResults(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getBlameResults(revision, projectId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class,
            IdValidator.class})
    public CommitFront getCalamit(String revision, Integer projectId, Boolean withDiff, Boolean withBranches, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommit(revision, projectId, isTrue(withDiff), isTrue(withBranches), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public CommitBranchesFront getCalamitBranches(String revision, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException, WrongRefException, BadPathException {
        return diffService.getCommitBranches(revision, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RevisionValidator.class, IdValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public CommitFront getPrevRevision(String revision, Integer projectId, String path, String domain, Integer invokerId)
            throws CommonException, AccessException, NotFoundException, WrongRefException {
        return refViewer.getPrevRevision(projectId, revision, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSet(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSet(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, RevisionValidator.class, RevisionValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetForMergeRequest(Integer projectId, String path, String fromRevision, String toRevision, String domain, Integer invokerId)
            throws NotFoundException, AccessException, WrongRefException {
        return changeSetCreator.getChangeSetForMergeRequest(projectId, path, fromRevision, toRevision, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, DateTimeValidator.class, DateTimeValidator.class, BranchNameValidator.class,
            BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public EntriesFront getChangeSetByDates(Integer projectId, String path, String fromDate, String toDate, String fromBranch, String toBranch, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return changeSetCreator.getChangeSetByDate(projectId, path, DateTimeRange.fromStrings(fromDate, toDate), fromBranch, toBranch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront addBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws CommonException {
        return branchService.addBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront updateBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.updateBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BranchValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBranch(BranchRequest branchRequest, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return branchService.deleteBranch(branchRequest, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesFront getBranches(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranches(projectId, filter, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public BranchFront getBranch(Integer projectId, String branchName, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getBranch(projectId, branchName, invokerId, domain);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {EmptyValidator.class, BranchNameValidator.class, DomainValidator.class})
    public BranchBadgeFront getBranchBadge(String projectNameId, String branchName, String domain) throws NotFoundException, CommonException {
        return branchService.getBranchBadge(projectNameId, branchName, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BranchesComparisonFront getCompareCommitsInBranches(BranchesComparisonFront branchesComparison, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getCompareCommitsInBranches(branchesComparison, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront getMergeStatus(Integer projectId, String source, String destination, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.getMergeStatus(projectId, source, destination, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, SortTypeValidator.class, SortByValidator.class, DomainValidator.class, IdValidator.class})
    public MergeSuggestionsFront getMergeSuggestions(Integer projectId, SortType sortType, String sortBy, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return mergeSuggestionService.getMergeSuggestions(projectId, sortType, sortBy, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {MergeBranchesValidator.class, DomainValidator.class, IdValidator.class})
    public BranchComparisonFront mergeBranches(MergeBranchesFront mergeBranchesFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return branchService.mergeBranches(mergeBranchesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public DefaultBranchFront getDefaultBranch(Integer projectId, String domain, Integer invokerId) throws CommonException {
        return branchService.getDefaultBranchFront(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success setDefaultBranch(ProjectFront project, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return branchService.setDefaultBranch(project.id, branch, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddMergeRequestValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront addMergeRequest(MergeRequestFront mergeRequestFront, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.addMergeRequest(mergeRequestFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ChangeMergeRequestStatusValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestFront updateMergeRequest(ChangeMergeRequestStatusFront request, String domain, Integer invokerId) throws CommonException {
        return mergeRequestService.updateMergeRequest(request, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, BooleanValidator.class,
            SortTypeValidator.class, SortByValidator.class, LimitValidator.class, FromValidator.class, DomainValidator.class, IdValidator.class})
    public MergeRequestsFront getMergeRequests(Integer projectId, String source, String destination, String statuses, Boolean onlyMine, SortType sortType,
            String sortBy, Integer limit, Integer from, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return mergeRequestService.getMergeRequests(projectId, source, destination, statuses, onlyMine, sortType, sortBy, limit, from, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GitTagValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront addGitTag(GitTagFront tagFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return gitTagService.addTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.deleteTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagFront getGitTag(Integer projectId, String name, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTag(projectId, name, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public GitTagsFront getGitTags(Integer projectId, String filter, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return gitTagService.getTags(projectId, filter, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFile(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFile(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFilesRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFiles(CommitFilesRequest commitFilesRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFiles(commitFilesRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CommitFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileChanges(CommitFileRequest commitFileRequest, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return commitMaker.commitFileChanges(commitFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DeleteFileRequestValidator.class, DomainValidator.class, IdValidator.class})
    public RevisionFront commitFileDeletion(DeleteFileRequest deleteFileRequest, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return commitMaker.commitFileDeletion(deleteFileRequest, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success syncRepository(Integer projectId, Boolean forceReimport, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return repositoryManager.syncRepositoryInThread(projectId, forceReimport, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePullRequestsEnabledValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront updatePullRequestsEnabled(ProjectFront projectFront, String domain, Integer invokerId) throws CommonException {
        return repositoryManager.updatePullRequestsEnabled(projectFront, domain, invokerId);
    }

    // pipelines

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public PipelineFront getPipelineById(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return openSourceProxy.getPipelineById(pipelineId, domain, invokerId);
    }

    @Override
    // not validated by WM - external method
    @Validate(validators = {IdValidator.class, DomainValidator.class})
    public PipelineBadgeFront getPipelineBadge(Integer pipelineId, String domain) throws NotFoundException {
        return pipelineService.getPipelineBadge(pipelineId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByProjectId(Integer projectId, Boolean showInactive, Boolean showBuildServerInfo, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByProjectId(projectId, showInactive, showBuildServerInfo, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesCommitsBehindFront getPipelinesCalamitsBehindByProjectId(Integer projectId, Boolean showInactive, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return pipelineService.getPipelinesCommitsBehindByProjectId(projectId, showInactive, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesCommitsBehindFront getSandboxesCalamitsBehindByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxService.getSandboxesCommitsBehindByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYamlByProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYamlByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelinesYaml(String pipelineIds, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelinesYaml(getIds(pipelineIds), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getPipelineYamlForEdit(Integer pipelineId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.getPipelineYamlForEdit(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRemoteProjectId(Integer projectId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRemoteProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {ProjectIdNotNullValidator.class, DomainValidator.class, IdValidator.class})
    public Success disablePipelinesFromRemote(ProjectFront projectFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.disablePipelinesFromRemote(projectFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportPipelinesLegacy(Integer projectId, String domain, String token) throws NotFoundException, AccessException, CommonException {
        return pipelineYamlService.exportPipelinesLegacy(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, IdValidator.class})
    public Success importPipelines(YamlReviewFront yamlReviewFront, String domain, Integer invokerId) throws CommonException {
        return pipelineYamlUpdater.importPipelines(yamlReviewFront, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, StringValidator.class})
    public YamlReviewFront exportProjectVariablesLegacy(Integer projectId, String domain, String token)
            throws NotFoundException, AccessException, CommonException {
        return migrateVariablesService.exportProjectVariables(projectId, domain, true);
    }

    /**
     * Usage: In case to migrate user to standalone
     */
    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {ImportPipelinesValidator.class, DomainValidator.class, StringValidator.class})
    public Success importProjectVariables(YamlReviewFront yamlReviewFront, String domain, String token) throws CommonException {
        migrateVariablesService.importProjectVariables(yamlReviewFront, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesByIntegration(String hashId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineService.getPipelinesByIntegration(hashId, invokerId, domain);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineUsages getPipelinesFilesystemSize(String domain, Integer invokerId) throws AccessException, CommonException {
        return pipelineService.getPipelinesFilesystemSize(domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInRunNextAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInRunNextAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineUsages getUsagesInCopyFilesAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineUsageService.getUsagesInCopyFilesAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront addPipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.addPipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    public PipelineFront clonePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.clonePipeline(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipeline(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipeline(pipelineFront, domain, invokerId, false);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineYamlFrontValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineByYaml(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.updatePipelineByYaml(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront revertPipelineChanges(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.revertPipelineChanges(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront updatePipelineTriggerConditions(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updatePipelineTriggerConditions(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelineValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineFront toggleSchedule(PipelineFront pipelineFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.toggleSchedule(pipelineFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPipelineUsedInAction(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.isPipelineUsedInAction(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipeline(Integer pipelineId, Boolean forceRemoveGitConfig, String domain, Integer invokerId) throws CommonException {
        return pipelineUpdater.deletePipeline(pipelineId, forceRemoveGitConfig, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelinePermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront addPipelinePermissions(PipelinePermissionsFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.addPipelinePermissions(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdatePipelinePermissionValidator.class, DomainValidator.class, IdValidator.class})
    public PipelinePermissionsFront updatePipelinePermission(PipelinePermissionFront pipelinePermissionsFront, String domain, Integer invokerId)
            throws CommonException {
        return pipelineService.updatePipelinePermission(pipelinePermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deletePipelinePermission(Integer permissionId, Integer pipelineId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deletePipelinePermission(new PipelinePermissionFront(permissionId, pipelineId), domain, invokerId);
        return new Success();
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public AccessLevelFront getPipelineAccessLevel(Integer pipelineId, String domain, Integer invokerId) throws NotFoundException {
        return pipelineService.getPipelineAccessLevel(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront addAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addAction(action, domain, invokerId, true, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront actionYamlReview(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddPipelineValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront pipelineYamlReview(PipelineFront pipeline, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineYamlService.getYamlForPipeline(pipeline, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success addAtomicActions(DeploymentActionFront action, String domain, Integer invokerId) throws CommonException {
        pipelineService.addAtomicActions(action, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TestActionValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAction(ActionFront action, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.testAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetServerContentValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getServerContent(ActionFront action, Integer projectId, String domain, Integer invokerId) throws CommonException {
        return deploymentActionService.getServerContent(action, projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GetAndroidTracksValidator.class, DomainValidator.class, IdValidator.class})
    public AndroidTracksFront getAndroidTracks(ActionFront action, String domain, Integer invokerId) throws IOException, CommonException {
        return androidActionService.getTracks(action, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CloneActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront cloneAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.cloneAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront getActionById(Integer actionId, Boolean showPrivateData, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getActionById(actionId, domain, invokerId, showPrivateData == null || !showPrivateData);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public YamlReviewFront getActionYaml(Integer actionId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineYamlService.getYamlForAction(actionId, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, StringValidator.class, LimitValidator.class, BooleanValidator.class, DomainValidator.class,
            IdAllowNullValidator.class})
    public ActionExecutionFront getActionExecution(String executionId, String actionExecutionId, Integer consoleOutputLimit, Boolean rawLogs, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getActionExecution(executionId, actionExecutionId, consoleOutputLimit, isTrue(rawLogs), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ContainerInfoFront getActionContainerInfo(String executionId, String actionExecutionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionService.getActionContainerInfo(executionId, actionExecutionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getWorkspacePathsForAutocomplete(Integer pipelineId, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return buildWorkspaceService.getWorkspacePathsForAutocomplete(pipelineId, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, RevisionValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PathsFront getRepositoryPathsForAutocomplete(Integer projectId, String revision, String query, Boolean onlyFolders, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return repositoryContentViewer.getRepositoryPathsForAutocomplete(projectId, revision, query, onlyFolders, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomActionTypesFront getCustomActionTypes(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getCustomActionTypes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public CustomActionDefinitionsFront getCustomActionVersions(String definitionId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return customActionDefinitionService.getVersions(definitionId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, StringValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolveTemplate(String executionId, String actionExecutionId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(executionId, actionExecutionId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront resolvePipelineTemplate(Integer pipelineId, String template, String domain, Integer invokerId)
            throws NotFoundException, CommonException {
        return executionService.resolveTemplate(pipelineId, template, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteAction(Integer actionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteAction(new ActionWithId(actionId), domain, invokerId, true);
        return new Success(Messages.msg_4301());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateAction(action, domain, invokerId, true, false, true);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ToggleActionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront toggleAction(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.toggleAction(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateRunNexParalleltValidator.class, DomainValidator.class, IdValidator.class})
    public ActionFront updateRunNextParallel(ActionFront action, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateRunNextParallel(action, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {BulkUpdateActionDestinationAndOrderValidator.class, DomainValidator.class, IdValidator.class})
    public ActionsFront bulkUpdateTriggerTimeAndOrder(ActionsFront actions, String domain, Integer invokerId) throws CommonException {
        return pipelineService.bulkUpdateTriggerTimeAndOrder(actions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddActionPermissionsValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront addActionPermissions(ActionPermissionsFront actionPermissionsFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.addActionPermissions(actionPermissionsFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateActionPermissionValidator.class, DomainValidator.class, IdValidator.class})
    public ActionPermissionsFront updateActionPermission(ActionPermissionFront actionPermissionFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.updateActionPermission(actionPermissionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteActionPermission(Integer actionId, Integer permissionId, String domain, Integer invokerId) throws CommonException {
        pipelineService.deleteActionPermission(new ActionPermissionFront(permissionId, actionId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunPipelineValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionsFront runPipeline(ExecutionsFront executionsFront, String ipAddress, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineExecutor.runPipelineWithIpValidation(executionsFront, invokerId, ipAddress);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {PipelineWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success clearPipelineCache(PipelineFront pipelineFront, String domain, Integer invokerId) throws CommonException {
        return pipelineService.clearCache(pipelineFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForProjectValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForProject(ProjectFront projectFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromProject(projectFront, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunAllPipelinesForFolderValidator.class, DomainValidator.class, IdValidator.class})
    public Success runAllPipelinesForFolder(FolderFront folderFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        pipelineExecutor.runPipelinesFromFolder(folderFront, invokerId, domain);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public RefsFront getExecutionBranchReview(Integer pipelineId, String refPattern, String prefix, Integer limit, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException, CommonException {
        return executionService.getExecutionBranchReview(pipelineId, refPattern, prefix, limit, invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminatePipelineExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront terminateExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws CommonException {
        return executionTerminator.terminateExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {TerminationFrontValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateExecutions(TerminationFront terminationFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionTerminator.terminateExecutions(terminationFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {ActionValidationValidator.class, DomainValidator.class, IdValidator.class})
    public Success terminateActionValidation(ActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return pipelineService.terminateActionValidation(actionFront);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {StringValidator.class, LimitValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionFront getExecutionById(String executionId, Integer consoleOutputLimit, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return openSourceProxy.getExecutionById(executionId, consoleOutputLimit, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdAllowNullValidator.class})
    public FeedsFront getExecutions(Integer pipelineId, Integer slot, Boolean onlyDeployments, String beforeFeedId, Integer limit, String domain,
            Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return openSourceProxy.getExecutions(pipelineId, slot, onlyDeployments, beforeFeedId, limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByPipelineSlots(Integer pipelineId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionsByPipelineSlots(pipelineId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionQueue(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return executionService.getExecutionQueue(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getExecutionsByRevisions(Integer projectId, String revisions, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return executionService.getExecutionsByRevisions(projectId, revisions, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithPipelines(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return pipelineService.getProjectsWithPipelines(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSandboxes(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public ProjectsFront getProjectsWithSnapshots(String domain, Integer invokerId) {
        return sandboxService.getProjectsWithSnapshots(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionCommentValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionComment(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionComment(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateExecutionPriorityValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateExecutionPriority(ExecutionFront executionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return executionService.updateExecutionPriority(executionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateDelayedExecutionValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionFront updateDelayedExecution(ExecutionFront executionFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return executionService.updateDelayedExecution(executionFront, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OffSetValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionStatsFront getExecutionStats(Integer offset, String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionStats(offset, domain, invokerId);
    }

    @Override
    // security not required - open source method (validated inside)
    @Validate(validators = {IdValidator.class, DateTimeValidator.class, DateTimeValidator.class, DomainValidator.class, IdAllowNullValidator.class})
    public ExecutionTimeStatsFront getExecutionTimeStats(Integer pipelineId, String fromDate, String toDate, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getExecutionTimeStats(pipelineId, DateTimeRange.fromStrings(fromDate, toDate), domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public PipelineStatusStatsFront getPipelineStatusStats(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return executionStatsProvider.getPipelineStatusStats(domain, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {StringValidator.class, FromValidator.class, LimitValidator.class, IdValidator.class})
    public PipelinesFront getPipelinesByRunnerName(String name, Integer from, Integer limit, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return pipelineService.getPipelinesByRunnerName(name, from, limit, invokerId);
    }

    @Override
    @Standalone
    @Validate(validators = {EmptyValidator.class})
    public PipelinesCountFront getPipelinesCountByTag(String tagName) throws AccessException, NotFoundException {
        return pipelineService.getPipelinesCountByTag(tagName);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success fetchPipelineFilesystem(FetchPipelineFilesystemCommand fetchPipelineFilesystemCommand, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, WrongRefException {
        pipelineFilesystemFetcher.fetchPipelineFilesystem(fetchPipelineFilesystemCommand.pipelineId(), fetchPipelineFilesystemCommand.ref(),
                fetchPipelineFilesystemCommand.slot(), invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isStaticFilesEmpty(Integer pipelineId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return pipelineFilesystemFetcher.isStaticFilesEmpty(pipelineId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success testAddSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.testAddSandbox(sandboxFront, domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddSandboxValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.addSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {SandboxMappingsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws CommonException {
        return sandboxService.updateSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateSandboxTagsValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront updateSandboxTags(SandboxFront sandboxFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.updateSandboxTags(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront startSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.startSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront stopSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.stopSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront restartSandbox(SandboxFront sandboxFront, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxOperator.restartSandbox(sandboxFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront getSandboxById(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxByInstanceId(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront getSandboxSnapshotById(String snapshotId, String domain, Integer invokerId)
            throws CommonException, NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotById(snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByProjectId(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return sandboxService.getSandboxesByProjectId(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public SandboxesFront getStartingSandboxesDeveloperMode(String token) throws AccessException {
        return sandboxService.getStartingSandboxesDeveloperMode();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getSandboxesByWorkspace(String domain, Integer invokerId) throws AccessException, NotFoundException {
        return sandboxService.getSandboxesByWorkspace(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public SandboxesFront getActiveSandboxes(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return sandboxService.getActiveSandboxes(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandbox(String sandboxId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxService.deleteSandbox(sandboxId, domain, invokerId, false);
        return new Success(Messages.msg_4323());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getSandboxContent(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.getSandboxContent(sandboxId, path, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Response getSandboxFile(String sandboxId, String path, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException, BrowseException {
        return sandboxBrowser.getSandboxFile(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInSandbox(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.isPathExistentInSandbox(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadSandboxFile(MultipartBody file, String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.uploadSandboxFile(file, sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, PathValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxPath(String sandboxId, String path, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.deletePath(sandboxId, path, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success createSandboxDirectory(BrowseEntry browseEntry, String sandboxId, String domain, Integer invokerId) throws CommonException {
        return sandboxBrowser.createSandboxDirectory(browseEntry, sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxEndpointFront getSandboxEndpoint(String sandboxId, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return sandboxService.getSandboxEndpoint(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshots(String sandboxId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshots(sandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotsFront getSandboxSnapshotsByProject(Integer projectId, String domain, Integer invokerId) throws NotFoundException, AccessException {
        return sandboxSnapshotService.getSandboxSnapshotsByProject(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {CreateSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxSnapshotFront createSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId)
            throws NotFoundException, AccessException {
        return sandboxSnapshotService.createSnapshot(snapshotFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteSandboxSnapshot(String snapshotId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        sandboxSnapshotService.deleteSnapshot(snapshotId, domain, invokerId);
        return new Success(Messages.msg_4324());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RestoreSnapshotValidator.class, DomainValidator.class, IdValidator.class})
    public Success restoreSandboxSnapshot(SandboxSnapshotFront snapshotFront, String domain, Integer invokerId) throws NotFoundException, AccessException {
        sandboxSnapshotService.restoreSnapshot(snapshotFront, domain, invokerId);
        return new Success(Messages.msg_4325());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSnapshot(SandboxFront sandboxFront, String snapshotId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxSnapshotService.createSandboxFromSnapshot(sandboxFront, snapshotId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxFront addSandboxFromSandbox(SandboxFront sandboxFront, String originSandboxId, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return sandboxService.createSandboxFromSandbox(sandboxFront, originSandboxId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront addTag(TagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.addTag(tagFront, domain);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateTagValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagFront updateTag(UpdateTagFront tagFront, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.updateTag(tagFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public Success deleteTag(String tagName, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return tagService.deleteTag(tagName, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyOnStandaloneDomainValidator.class, IdValidator.class})
    public TagsFront getTags(String domain, Integer invokerId) throws NotFoundException, CommonException, AccessException {
        return tagService.getTags(domain);
    }

    @Override
    // security not required
    public Distributions getSandboxDistributions() {
        return new Distributions(lxdPlaybookDAO.getDistributions().values());
    }

    @Override
    // security not required
    public Versions getPlaybookVersions(String type) {
        return lxdPlaybookDAO.getVersions(PlaybookType.valueOf(type));
    }

    @Override
    public SimpleModules getPlaybookModules(String type, String version) {
        return lxdPlaybookDAO.getModules(PlaybookType.valueOf(type), version);
    }

    // docker

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImagesFront findDokerImages(String phrase, String domain, Integer invokerId) throws CommonException {
        return dockerImageService.findImages(phrase);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public DockerImageTagsFront getDokerImageTag(String repository, String domain, Integer invokerId) throws CommonException, HttpException {
        return dockerHubProxy.getTags(repository); //
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry getBuildWorkspaceContent(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getContent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ArtifactsAndStaticFilesFront getArtifactsAndStaticFiles(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws NotFoundException, AccessException, CommonException {
        return buildWorkspaceService.getArtifactsAndStaticFiles(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public BooleanFront isPathExistentInBuildWorkspace(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.isPathExistent(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Response getBuildWorkspaceFile(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    // security not required - public method, validate on front side
    @Validate(validators = {IdValidator.class, PathValidator.class, EmptyValidator.class})
    public Response getPublicBuildWorkspaceFile(Integer pipelineId, String path, Integer slot) throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.getFile(pipelineId, path, slot);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddBuildWorkspaceDirValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Entry addBuildWorkspaceDir(BuildWorkspaceEntry entry, Integer slot, String domain, Integer invokerId) throws CommonException {
        return buildWorkspaceService.addDirectory(entry, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteBuildWorkspaceDir(Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return buildWorkspaceService.deletePath(pipelineId, path, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public Success uploadBuildWorkspaceFile(MultipartBody file, Integer pipelineId, String path, Integer slot, String domain, Integer invokerId)
            throws CommonException {
        return buildWorkspaceService.uploadFile(file, path, pipelineId, slot, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public DockerContainersFront getAllDokerContainers(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return dockerImageService.getAllDockerContainers();
    }

    @Override
    // security not required - for internal use
    public Success evictCache(DefaultEvictCacheService.CacheType cacheType, String name) {
        return evictCacheService.evictCache(cacheType, name);
    }

    @Override
    // security not required - for internal use
    public Success evictAllCache() {
        return evictCacheService.evictAllCache();
    }

    @Override
    // security not required - for internal use
    public Success resetBuildRegistry() {
        buildServerRegistry.reset();
        apiServerRegistry.getAllServersWithoutServer(apiServerId).forEach(ApiServer::resetBuildRegistry);
        return new Success();
    }

    @Override
    // security not required - for internal use
    public DockerNetworksFront getActiveDokerNetworks(String serverInstanceId) {
        return new DockerNetworksFront(buildServerRegistry.getServer(serverInstanceId).getActiveNetworks());
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateRegistryEntryValidator.class, StringValidator.class})
    public Success updateRegistryValue(RegistryEntryFront entry, String token) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    // security not required - (method only for standalone)
    @Standalone
    @Validate(validators = {UpdateRegistryEntryValidator.class})
    public Success updateRegistryValueInStandalone(RegistryEntryFront entry) throws CommonException {
        registryService.updateEntry(entry.getId(), entry.getValue());
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    public RegistryEntriesFront getRegistryEntries(String token) throws CommonException, AccessException {
        return new RegistryEntriesFront(registryService.list());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {RunJobValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront runJob(JobFront job, String domain, Integer invokerId) throws CommonException {
        return jobService.runJob(job, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public JobFront getJob(Integer jobId, Boolean withDetails, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        JobFront job = jobService.getJob(jobId, domain, invokerId);
        if (!isTrue(withDetails)) {
            job.clearDetails();
        }
        return job;
    }

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Response getJobFile(Integer jobId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        return jobService.getJobFile(jobId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {JobTypeValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public JobsFront getJobs(Job.Type type, Integer limit, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return jobService.getJobs(domain, invokerId, type, limit);
    }

    // integrations

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront addIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegration(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class, StringValidator.class})
    public IntegrationFront addIntegrationDeveloperMode(IntegrationFront integration, String domain, Integer invokerId, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.addIntegrationDeveloperMode(integration, domain, invokerId);
    }

    // security not required
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success replaceGitHubIdDeveloperMode(IntegrationFront integration, String token)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.replaceGitHubUserIdDeveloperMode(integration);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationFront updateIntegration(IntegrationFront integration, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.updateIntegration(integration, domain, invokerId);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {HashIdValidator.class, IdValidator.class})
    public Success deleteIntegration(String hashId, Integer invokerId) throws AccessException, NotFoundException, CommonException, CommonException {
        return integrationService.deleteIntegration(hashId, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public IntegrationsFront getAllowedIntegrationsForUser(Integer projectId, Boolean withUsage, String pushHash, String domain, Integer invokerId)
            throws NotFoundException, CommonException, AccessException {
        return integrationAccessService.getAllowedIntegrationsForUser(domain, invokerId, projectId, withUsage, pushHash);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getIntegrationsDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return integrationAccessService.getIntegrationsDeveloperMode(domain, projectId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, StringValidator.class})
    public String getVariablesDeveloperMode(Integer projectId, String domain, String token) throws NotFoundException, AccessException {
        return variableService.getVariablesDeveloperMode(projectId, domain);
    }

    @Override
    // security not required - validate owner inside
    @Validate(validators = {StringValidator.class, EmptyValidator.class, IdValidator.class})
    public IntegrationsFront getIntegrationsByGitHubUserId(String gitHubUserId, AuthType authType, Integer invokerId) throws AccessException, CommonException {
        return integrationService.getIntegrationsByGitHubUserId(gitHubUserId, authType, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FetchCustomProjectValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront fetchCustomProject(ExternalProjectFront externalProject, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationService.fetchCustomRepo(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {BulkUpdateIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public Success bulkUpdateIntegration(BulkUpdateFront bulkUpdateFront, String domain, Integer invokerId) throws NotFoundException, CommonException {
        return integrationService.bulkUpdateIntegration(bulkUpdateFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public IntegratedEntityInfos getIntegratedEntitiesInfo(Integer userId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return integrationService.getIntegratedEntitiesByUser(userId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddProjectWithIntegrationValidator.class, DomainValidator.class, IdValidator.class})
    public ProjectFront addProjectWithIntegration(ExternalProjectFront externalProject, String domain, Integer invokerId) throws CommonException {
        return projectService.addProjectWithIntegration(externalProject, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {HashIdValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public ExternalEntitiesFront getExternalEntitiesByIntegration(String hashId, IntegrationSubtype subtype, Integer page, String region, String cluster,
            String googleProjectId, String subscriptionId, String group, String account, String folderId, String namespace, Boolean noCache,
            String installationId, String workspace, Integer pipelineId, Integer actionId, String domain, Integer invokerId)
            throws CommonException, NotFoundException {
        ExternalEntitiesParams params = new ExternalEntitiesParams(hashId, subtype, page, region, cluster, googleProjectId, subscriptionId, group, account,
                folderId, namespace, noCache, installationId, workspace, pipelineId, actionId, domain, invokerId);
        return integrationService.getExternalEntitiesByIntegration(params, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, DomainValidator.class, IdValidator.class})
    public VariablesFront getVariablesByIntegration(String hashId, Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return integrationActionService.getVariablesForView(hashId, projectId, domain, invokerId);
    }

    @Override
    // security not required - global method, nothing to validate
    public StringFront getTelegramBot() {
        return new StringFront(telegramClient.getBotName());
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public PullRequestsFront getPullRequests(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return projectIntegrationService.getPullRequests(projectId, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public GitWebhookRequestsFront getGitWebhookRequests(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return gitWebhookService.getRequests(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesNamespaces getKubernetesNamespaces(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesNamespaces(actionFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {KubernetesAuthValidator.class, DomainValidator.class, IdValidator.class})
    public KubernetesDeployments getKubernetesContainers(KubernetesActionFront actionFront, String domain, Integer invokerId)
            throws AccessException, CommonException, CommonException, NotFoundException {
        return kubernetesService.getKubernetesContainers(actionFront, domain, invokerId);
    }

    // Webhooks

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {AddWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront addWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.addWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {UpdateWebhookValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront updateWebhook(WebhookFront webhookFront, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.updateWebhook(webhookFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WebhooksFront getWebhooks(String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhooks(domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public WebhookFront getWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.getWebhook(webhookId, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWebhook(Integer webhookId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return webhookService.deleteWebhook(webhookId, domain);
    }

    // AWS Marketplace

    @Override
    // security not required - validate by token
    @Validate(validators = {StringValidator.class})
    public AWSSubscriptionFront checkAmazonMarketplaceToken(String xAmznMarketplaceToken) throws CommonException {
        return awsMarketplaceService.checkAmazonMarketplaceToken(xAmznMarketplaceToken);
    }

    @Override
    // security not required - validate by token
    public AWSSubscriptionFront checkEntitlementUpdate(EntitlementUpdatedFront entitlementUpdated) throws CommonException {
        return awsMarketplaceService.checkEntitlementUpdate(entitlementUpdated);
    }

    // Feeds

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {AddReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront addReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.addReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {FirstLevelReplyWithIdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.deleteReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EditReplyValidator.class, DomainValidator.class, IdValidator.class})
    public ReplyFront editReply(ReplyFront reply, String domain, Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return feedService.editReply(reply, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getFeed(String feedId, String domain, Integer invokerId) throws AccessException, NotFoundException, CommonException {
        return feedService.getFeed(feedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {OriginTypesValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class, IdAllowNullValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, LimitValidator.class, DomainValidator.class, IdValidator.class})
    public FeedsFront getFeeds(String types, Integer projectId, Integer pipelineId, Integer userId, Integer groupId, String branch, String sandboxId,
            Integer zoneId, String zoneRecordName, String zoneRecordType, String beforeFeedId, Integer limit, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getFeeds(types, projectId, pipelineId, userId, groupId, branch, sandboxId, zoneId, zoneRecordName, zoneRecordType, beforeFeedId,
                limit, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsAggregationsFront getPipelineSettingsAggregations(Integer pipelineId, String beforeFeedId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsAggregations(pipelineId, beforeFeedId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public PipelineSettingsDeltaFront getPipelineSettingsDelta(Integer pipelineId, String fromId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return pipelineHistoryService.getPipelineSettingsDelta(pipelineId, fromId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public FeedFront getLastFeedWithYamlProcessing(Integer projectId, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return feedService.getLastFeedWithYamlProcessing(projectId, domain, invokerId);
    }

    // PAYMENT

    // security not required - in my id

    @Override
    public TransactionFront addBalance(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException {
        return billingService.addBalance(nonce, invokerId);
    }

    @Override
    @Validate(validators = {ChangePaymentMethodValidator.class, IdValidator.class})
    public BillingFront addPaymentMethod(PaymentNonceFront nonce, Integer invokerId) throws AccessException, CommonException, AccessException {
        return billingService.addPaymentMethod(invokerId, nonce);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {UpdateCompanyDetailsValidator.class, AllowNullDomainValidator.class, IdValidator.class})
    public BillingFront updateCompanyDetails(BillingFront billingFront, String domain, Integer invokerId) throws CommonException, AccessException {
        return billingService.updateCompanyDetails(billingFront, domain, invokerId);
    }

    // security not required - in my id
    @Override
    @Validate(validators = {IdValidator.class})
    public InvoicesFront getInvoices(Integer invokerId) throws AccessException, CommonException {
        return billingService.getInvoices(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class, IdValidator.class})
    public Response getInvoiceFile(Integer invoiceId, Integer invokerId) throws AccessException, NotFoundException {
        return billingService.getInvoiceFile(invoiceId, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public UsageFront getUsage(String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.getUsage(invokerId, domain);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {BooleanValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront activateWorkspace(Boolean activeExecutions, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.activateWorkspace(activeExecutions, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeWorkspaceAffiliateDeveloperMode(Integer workspaceId, Workspace.Affiliate affiliate, String token) {
        workspaceService.changeWorkspaceAffiliate(workspaceId, affiliate);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, StringValidator.class})
    public Success setBalanceDeveloperMode(Integer userId, Integer balance, String token) {
        billingService.setBalanceDeveloperMode(userId, balance);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class,
            EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success changePlanDeveloperMode(Integer pricePerMemory, Integer sandboxMemoryLimit, Integer filesystemSizeLimit, Integer freePipelineGBMinutesLimit,
            Integer freeSandboxGBMinutesLimit, Integer windowsDiskSize, Integer linuxDiskSize, Boolean nativeBuildsArm, Boolean selectVmTypeEnabled,
            String domain, String token) throws AccessException, AccessException {
        billingService.changePlanDeveloperMode(pricePerMemory, sandboxMemoryLimit, filesystemSizeLimit, freePipelineGBMinutesLimit, freeSandboxGBMinutesLimit,
                windowsDiskSize, linuxDiskSize, nativeBuildsArm, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class})
    public Success endTrialWithModDateDeveloperMode(String domain, String token) throws AccessException, CommonException {
        return billingService.endTrialWithModDateDeveloperMode(domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, StringValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success updateCustomInstanceTypesDeveloperMode(String domain, String ec2Type, Integer multiplier, Integer divider, String token) {
        billingService.updateCustomInstanceTypesDeveloperMode(domain, ec2Type, multiplier, divider);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {DomainValidator.class, EmptyValidator.class, EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success changeTrialLimitsDeveloperMode(String domain, Integer executionLimit, Integer commitLimit, String endDate, String token)
            throws AccessException, CommonException {
        return billingService.changeTrialLimitsDeveloperMode(executionLimit, commitLimit, endDate, domain);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTodayDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTodayDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeTomorrowDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeTomorrowDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success checkTrialsDeveloperMode(String token) throws AccessException, CommonException {
        return billingService.checkTrialsDeveloperMode();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success resetBalanceDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        billingService.resetBalanceDeveloperMode(userId);
        return new Success();
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public TransactionFront payNow(Integer invokerId) throws AccessException, CommonException {
        return billingService.payNow(invokerId, true, false);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success chargeDeveloperMode(Integer userId, String token) throws AccessException, CommonException {
        return billingService.chargeDeveloperMode(userId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, IdValidator.class, StringValidator.class})
    public Success updateWholePlanDeveloperMode(PlanFront planFront, Integer workspaceId, String token) {
        billingService.updateWholePlanDeveloperMode(workspaceId, planFront);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, IdValidator.class, StringValidator.class})
    public Success regenerateInvoice(Integer invoiceId, Integer userId, String token) {
        invoiceService.regenerateInvoice(userId, invoiceId);
        return new Success();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdateWorkspacePlanValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePlan(PackagePlanFront packagePlanFront, String domain, Integer invokerId) throws CommonException {
        return billingService.updateWorkspacePlan(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {UpdatePipelineConcurrentsValidator.class, DomainValidator.class, IdValidator.class})
    public Success updateWorkspacePipelineResources(PackagePlanFront packagePlanFront, String domain, Integer invokerId)
            throws AccessException, CommonException {
        return billingService.updateWorkspacePipelineResources(packagePlanFront, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public ExecutionUsagesFront getExecutionUsages(Integer projectId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return billingService.getExecutionUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, DomainValidator.class, IdValidator.class})
    public SandboxUsagesFront getSandboxUsages(Integer projectId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return billingService.getSandboxUsages(projectId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BranchNameValidator.class, DomainValidator.class, IdValidator.class})
    public XcodeProjectDetailsFront getXcodeProjectDetails(Integer projectId, String branch, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return xcodeProjectHelper.getProjectDetails(projectId, branch, domain);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {GenerateMacSignPropertyListValidator.class, DomainValidator.class, IdValidator.class})
    public StringFront generateMacSignPropertyList(NativeBuildActionFront action, String domain, Integer invokerId) throws NotFoundException {
        String propertyList = macSignPropertyListSource.getPropertyList(action, domain, invokerId);
        return new StringFront(propertyList);
    }

    @Override
    // security not required - internal use
    public MacVersionsFront getMacVersions() {
        return macVersionsService.getVersions();
    }

    // Custom domains

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainsFront listCustomDomains(String domain, Integer invokerId) throws NotFoundException, AccessException {
        return customDomainService.listCustomDomains(domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront addCustomDomain(CustomDomainFront customDomainFront, String domain, Integer invokerId) throws CommonException {
        return customDomainService.addCustomDomain(customDomainFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult deleteCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.deleteCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainFront checkCustomDomain(Integer customDomainId, String domain, Integer invokerId) throws NotFoundException {
        return customDomainService.checkAndReturnCustomDomain(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, BooleanValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInProject(Integer projectId, Boolean useWorkspaceCustomDomain, Integer customDomainId, String domain,
            Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInProject(projectId, useWorkspaceCustomDomain, customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult setCustomDomainInWorkspace(Integer customDomainId, String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(customDomainId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult unsetCustomDomainInWorkspace(String domain, Integer invokerId) throws CommonException {
        return customDomainService.setCustomDomainInWorkspace(null, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public CustomDomainOperationResult replaceCustomDomain(Integer oldCustomDomainId, Integer newCustomDomainId, String domain, Integer invokerId)
            throws CommonException {
        return customDomainService.replaceCustomDomain(oldCustomDomainId, newCustomDomainId, domain, invokerId);
    }

    // internal use

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public CustomDomainFront activateCustomDomainDeveloperMode(Integer customDomainId, String token) {
        return customDomainService.activateCustomDomainDeveloperMode(customDomainId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, EmptyValidator.class, StringValidator.class})
    public Success generateEppDocument(String month, String year, String token) throws AccessException, CommonException, IOException {
        accountancyService.generateEppDocument(month, year);
        return new Success();
    }

    // Developer methods

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateLastLoginDate(String lastLoginDate, String domain, String token) throws CommonException, NotFoundException, AccessException {
        workspaceService.updateLastLoginDate(lastLoginDate, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, StringValidator.class})
    public Success updateBeforeTerminationEmailSent(String beforeTerminationEmailSent, String domain, String token)
            throws CommonException, NotFoundException, AccessException {
        workspaceService.updateBeforeTerminationEmailSent(beforeTerminationEmailSent, domain);
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success runInactiveWorkspaceTerminatingJob(String token) throws CommonException, AccessException {
        inactiveWorkspaceTerminator.terminateInThread();
        return new Success();
    }

    // API Client

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront addApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws AccessException {
        return apiClientViewService.addApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront updateApiClient(ApiClientFront apiClient, String ipAddress, Integer invokerId)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClient(apiClient, invokerId, ipAddress);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {UpdateApiClientValidator.class, StringValidator.class, IdValidator.class, StringValidator.class})
    public ApiClientFront updateApiClientDeveloperMode(ApiClientFront apiClient, String ipAddress, Integer invokerId, String token)
            throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.updateApiClientDeveloperMode(apiClient, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {AddApiClientLogoValidator.class, IdValidator.class})
    public ApiClientFront addApiClientLogo(ApiClientLogoFront apiClientLogo, Integer invokerId) throws CommonException {
        return apiClientViewService.addApiClientLogo(apiClientLogo, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public ApiClientFront deleteApiClientLogo(String clientId, Integer invokerId) throws CommonException, AccessException, NotFoundException {
        return apiClientViewService.deleteApiClientLogo(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, StringValidator.class, IdValidator.class})
    public Success deleteApiClient(String clientId, String ipAddress, Integer invokerId) throws CommonException, NotFoundException {
        return apiClientViewService.deleteApiClient(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, IdValidator.class})
    public ApiClientFront getActiveApiClient(String clientId, Integer invokerId) throws NotFoundException {
        return apiClientViewService.getActiveApiClient(clientId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getApiClients(Integer invokerId) {
        return apiClientViewService.getApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public ApiClientsFront getActiveApiClients(Integer invokerId) {
        return apiClientViewService.getActiveApiClients(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, IdValidator.class})
    public ApiClientFront revokeAccessToApiClient(ApiClientFront apiClient, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAccessToApiClient(apiClient, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientIdValidator.class, StringValidator.class, IdValidator.class})
    public Success revokeAllUserTokens(String clientId, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.revokeAllUserTokens(clientId, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ApiClientWithIdValidator.class, StringValidator.class, IdValidator.class})
    public ApiClientFront resetClientSecret(ApiClientFront apiClient, String ipAddress, Integer invokerId) throws NotFoundException {
        return apiClientViewService.resetClientSecret(apiClient, ipAddress, invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront generatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.generatePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront regeneratePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws CommonException {
        return personalTokenService.regeneratePersonalToken(accessToken, invokerId, ipAddress);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront updatePersonalToken(AccessTokenFront accessToken, String ipAddress, Integer invokerId) throws NotFoundException {
        return personalTokenService.updatePersonalToken(accessToken, invokerId, ipAddress, false);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public AccessTokenFront updatePersonalTokenDeveloperMode(AccessTokenFront accessToken, String ipAddress, Integer invokerId, String token)
            throws NotFoundException, AccessException {
        return personalTokenService.updatePersonalTokenDeveloperMode(accessToken, invokerId, ipAddress);
    }

    // security not required
    @Override
    @Secured(level = TokenAccessLevel.class)
    public Success runOAuthTokenExpirationJobDeveloperMode(String token) throws AccessException {
        return oAuth2TokenExpirationService.expireOauthTokensDeveloperMode();
    }

    @Override
    // security not required - in my id
    public AccessTokensFront getPersonalTokens(Integer invokerId) {
        return personalTokenService.getPersonalTokens(invokerId);
    }

    @Override
    // security not required - in my id
    public AccessTokenFront getPersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.getPersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - in my id
    public Success deletePersonalToken(String tokenId, Integer invokerId) throws NotFoundException {
        return personalTokenService.deletePersonalToken(tokenId, invokerId);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront authorizeOAuthClient(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.authorizeClient(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public RedirectUrlFront checkOAuthClientAuthorized(AuthorizeParamsFront authorizeParams) throws CommonException {
        return oAuth2Service.checkOAuthClientAuthorized(authorizeParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront generateOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.generateToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public TokenFront refreshOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        return oAuth2Service.refreshToken(tokenParams);
    }

    @Override
    // security not required - oAuth method
    public Success revokeOAuthToken(TokenParamsFront tokenParams) throws CommonException {
        oAuth2Service.revokeToken(tokenParams);
        return new Success();
    }

    @Override
    // security not required - oAuth method
    public ApiClientFront getOAuthApiClient(String clientId) throws CommonException, NotFoundException {
        return oAuth2Service.getOauthApiClient(clientId);
    }

    // General

    @Override
    // security not required - global method, nothing to validate
    public CountriesFront getCountries(String domain, Integer invokerId) throws NotFoundException {
        return workspaceService.getCountries();
    }

    @Override
    // security not required
    public BooleanFront isAnyWorkspace() {
        return workspaceService.isAnyWorkspace();
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public AggregateDataFront getAggregateData(String ipAddress, String domain, Integer invokerId) throws CommonException {
        return aggregateDataService.getAggregateData(ipAddress, domain, invokerId);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, StringValidator.class})
    public AggregateDataFront getAggregateDataDeveloperMode(String ipAddress, String domain, String token) throws CommonException {
        return aggregateDataService.getAggregateDataDeveloperMode(ipAddress, domain);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public PaymentToken getBraintreeToken(Integer invokerId) {
        return paymentCardService.generatePaymentToken(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success makePaymentMethodDefault(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.makePaymentCardDefault(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {EmptyValidator.class, IdValidator.class})
    public Success deletePaymentMethod(String token, Integer invokerId) throws AccessException, CommonException {
        return paymentCardService.deletePaymentCard(token, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public BraintreePaymentMethodFronts getPaymentMethods(Integer invokerId) throws NotFoundException, AccessException, CommonException {
        return new BraintreePaymentMethodFronts(paymentCardService.getPaymentCards(invokerId).stream().map(PaymentCard::toFront).toList());
    }

    // visual tests

    @Override
    // security not required @Produces("multipart/form-data") - validate owner inside
    @Validate(validators = {StringValidator.class, StringValidator.class, EmptyValidator.class, StringValidator.class, DomainValidator.class,
            IdValidator.class})
    public Response getVisualTestsImage(String executionId, String actionExecutionId, DefaultVisualTestsImageLoader.Type type, String imageId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return visualTestsImageLoader.getImage(executionId, actionExecutionId, type, imageId, domain, invokerId);
    }

    // visual tests service

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public LicenseFront buyLicenseDeveloperMode(LicenseFront licenseFront, String token) throws AccessException, CommonException {
        return licenseService.buyLicenseDeveloperMode(licenseFront);
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {StringValidator.class})
    public Success initLicenseLimitDeveloperMode(String token) throws AccessException, CommonException, AccessException {
        licenseService.initLicenseLimitDeveloperMode();
        return new Success();
    }

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class})
    public Success changeLicenseStatusDeveloperMode(LicenseFront licenseFront, String token) throws CommonException, AccessException {
        return licenseService.changeLicenseStatusDeveloperMode(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {BuyLicenseValidatoror.class, IdValidator.class})
    public LicenseFront buyLicense(LicenseFront licenseFront, Integer invokerId) {
        return licenseService.buyLicense(licenseFront, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {IdValidator.class})
    public LicensesFront listLicenses(Integer invokerId) {
        return licenseService.listLicenses(invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ChangeLicenseValidator.class, IdValidator.class})
    public LicenseFront changeLicense(LicenseFront licenseFront, Integer invokerId) throws CommonException {
        return licenseService.changeLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdValidator.class})
    public Success removeLicense(String licenseId, Integer invokerId) throws CommonException {
        return licenseService.removeLicense(licenseId, invokerId);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {ActivateLicenseValidator.class})
    public SignedLicenseFront activateLicense(LicenseFront licenseFront)
            throws CommonException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.activateLicense(licenseFront);
    }

    @Override
    // security not required - in my id
    @Validate(validators = {StringValidator.class, IdAllowNullValidator.class})
    public SignedLicenseFront getLicense(String licenseId, Integer invokerId)
            throws NotFoundException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, SignatureException, InvalidKeyException,
            InvalidKeySpecException {
        return licenseService.getLicense(licenseId, invokerId);
    }

    @Override
    // security not required - for standalone only
    @Standalone
    @Validate(validators = {AllowNullDomainValidator.class, IdAllowNullValidator.class})
    public UsersFront getActiveUsers(String domain, Integer invokerId) throws AccessException, CommonException {
        return licenseService.getActiveUsers();
    }

    @Override
    @Secured(level = WorkspaceOwnerAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceFront reactivateTrial(WorkspaceFront workspace, String domain, Integer invokerId) throws AccessException, CommonException {
        return billingService.reactivateTrial(workspace.id, invokerId);
    }

    @Override
    // security not required - return data only for invoker
    @Validate(validators = {AllowNullDomainValidator.class, IdValidator.class})
    public TransactionsFront getTransactions(String domain, Integer invokerId) throws NotFoundException {
        return transactionService.getTransactions(invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront addEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront addEnvironmentVariables(EnvironmentVariablesFront variablesFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.addVariables(variablesFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public EnvironmentVariableFront updateEnvironmentVariable(EnvironmentVariableFront variableFront, String domain, Integer invokerId)
            throws AccessException, NotFoundException, CommonException {
        return variableService.updateVariable(variableFront, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class, IdAllowNullValidator.class,
            DomainValidator.class, IdValidator.class})
    public EnvironmentVariablesFront getEnvironmentVariables(Integer actionId, Integer projectId, Integer pipelineId, Integer sandboxId, String domain,
            Integer invokerId) throws NotFoundException, AccessException {
        return new EnvironmentVariablesFront(variableService.getVariableFronts(actionId, projectId, pipelineId, domain, invokerId));
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {IdValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteEnvironmentVariable(Integer environmentVariableId, String domain, Integer invokerId) throws AccessException, NotFoundException {
        variableService.deleteVariable(new EnvironmentVariableFront(environmentVariableId), domain, invokerId);
        return new Success();
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront addWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.addMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront updateWorkspaceMessage(WorkspaceMessageFront messageFront, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.updateMessage(messageFront, domain, invokerId);
    }

    @Override
    @Secured(level = AdminAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public Success deleteWorkspaceMessage(String messageId, String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.deleteMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {StringValidator.class, DomainValidator.class, IdValidator.class})
    public WorkspaceMessageFront getWorkspaceMessage(String messageId, String domain, Integer invokerId)
            throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessage(messageId, domain, invokerId);
    }

    @Override
    @Secured(level = WorkspaceMemberAccessLevel.class)
    @Validate(validators = {DomainValidator.class, IdValidator.class})
    public WorkspaceMessagesFront getWorkspaceMessages(String domain, Integer invokerId) throws AccessException, CommonException, NotFoundException {
        return workspaceMessageService.getMessages(domain, invokerId);
    }

    //UPLOAD

    @Override
    @Secured(level = UserOrWorkspaceMemberAccessLevel.class)
    @Validate(validators = {EmptyValidator.class, StringValidator.class, EmptyValidator.class, IdAllowNullValidator.class, DomainValidator.class,
            IdValidator.class})
    public FileUpload uploadFile(MultipartBody file, String filename, FileUpload.Route route, Integer projectId, String domain, Integer invokerId)
            throws NotFoundException {
        return uploadService.uploadFile(file, filename, route, projectId, domain);
    }

    @Override
    // security not required - internal use for es
    @Validate(validators = {AddEmailToBlackListValidator.class})
    public Success addEmailToBlacklist(EmailFront emailFront) {
        blacklist.add(emailFront.email, emailFront.reason);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success addOrUpdateEc2Instance(ServerInstance ec2Instance) {
        serverInstanceManager.addOrUpdateInstance(ec2Instance);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.addOrUpdateEc2Instance(ec2Instance);
        }
        return new Success();
    }

package works.buddy.application.internalapi;

import org.apache.cxf.jaxrs.ext.multipart.MultipartBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import works.buddy.application.api.oauth2.services.OAuth2Service;
import works.buddy.application.api.oauth2.view.model.AuthorizeParamsFront;
import works.buddy.application.api.oauth2.view.model.RedirectUrlFront;
import works.buddy.application.api.oauth2.view.model.TokenFront;
import works.buddy.application.api.oauth2.view.model.TokenParamsFront;
import works.buddy.application.internalapi.validators.access.AddPermissionSetValidator;
import works.buddy.application.internalapi.validators.access.UpdatePermissionSetValidator;
import works.buddy.application.internalapi.validators.api.*;
import works.buddy.application.internalapi.validators.build.AddBuildWorkspaceDirValidator;
import works.buddy.application.internalapi.validators.event.OriginTypesValidator;
import works.buddy.application.internalapi.validators.feed.AddReplyValidator;
import works.buddy.application.internalapi.validators.feed.ChangeMergeRequestStatusValidator;
import works.buddy.application.internalapi.validators.feed.EditReplyValidator;
import works.buddy.application.internalapi.validators.feed.FirstLevelReplyWithIdValidator;
import works.buddy.application.internalapi.validators.folder.AddFolderValidator;
import works.buddy.application.internalapi.validators.folder.FolderTypeValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderPriorityOrderValidator;
import works.buddy.application.internalapi.validators.folder.UpdateFolderValidator;
import works.buddy.application.internalapi.validators.group.AddGroupValidator;
import works.buddy.application.internalapi.validators.group.GroupWithIdValidator;
import works.buddy.application.internalapi.validators.group.GroupWithPermissionValidator;
import works.buddy.application.internalapi.validators.integration.*;
import works.buddy.application.internalapi.validators.job.JobTypeValidator;
import works.buddy.application.internalapi.validators.job.RunJobValidator;
import works.buddy.application.internalapi.validators.payment.ChangePaymentMethodValidator;
import works.buddy.application.internalapi.validators.payment.UpdateCompanyDetailsValidator;
import works.buddy.application.internalapi.validators.pipeline.*;
import works.buddy.application.internalapi.validators.project.*;
import works.buddy.application.internalapi.validators.query_param.*;
import works.buddy.application.internalapi.validators.registry.UpdateRegistryEntryValidator;
import works.buddy.application.internalapi.validators.runner.RegisterRunnerValidator;
import works.buddy.application.internalapi.validators.runner.TestRunnerValidator;
import works.buddy.application.internalapi.validators.runner.UpdateRunnerValidator;
import works.buddy.application.internalapi.validators.sandbox.*;
import works.buddy.application.internalapi.validators.scm.*;
import works.buddy.application.internalapi.validators.smtp.TestSmtpValidator;
import works.buddy.application.internalapi.validators.sso.EnableSSOValidator;
import works.buddy.application.internalapi.validators.sso.UpdateSSOSessionDurationValidator;
import works.buddy.application.internalapi.validators.standalone.ActivateLicenseValidator;
import works.buddy.application.internalapi.validators.standalone.BuyLicenseValidatoror;
import works.buddy.application.internalapi.validators.standalone.ChangeLicenseValidator;
import works.buddy.application.internalapi.validators.tag.AddTagValidator;
import works.buddy.application.internalapi.validators.tag.UpdateTagValidator;
import works.buddy.application.internalapi.validators.user.*;
import works.buddy.application.internalapi.validators.webhooks.AddWebhookValidator;
import works.buddy.application.internalapi.validators.webhooks.UpdateWebhookValidator;
import works.buddy.application.internalapi.validators.workspace.UpdateWorkspacePlanValidator;
import works.buddy.buildrmi.services.BrowseException;
import works.buddy.buildrmi.view.model.BrowseEntry;
import works.buddy.common.access.entities.AccessLog;
import works.buddy.common.access.view.AccessLogsFront;
import works.buddy.common.ec2.ServerInstance;
import works.buddy.common.ec2.ServerInstanceIdUpdate;
import works.buddy.common.entities.DateTimeRange;
import works.buddy.common.http.HttpException;
import works.buddy.common.integration.entities.AuthType;
import works.buddy.common.messages.Messages;
import works.buddy.common.notification.InternalNotificationService;
import works.buddy.common.registry.model.RegistryEntriesFront;
import works.buddy.common.registry.model.RegistryEntryFront;
import works.buddy.common.registry.services.RegistryService;
import works.buddy.common.rmi.ApiServer;
import works.buddy.common.scm.DiffException;
import works.buddy.common.scm.entities.*;
import works.buddy.common.scm.util.diff.FileDiffFront;
import works.buddy.common.scm.view.model.MergeBranchesFront;
import works.buddy.common.scm.view.model.RevisionFront;
import works.buddy.common.scm.view.model.RevisionsFront;
import works.buddy.git.common.exceptions.BadPathException;
import works.buddy.git.common.exceptions.NotRegularFileException;
import works.buddy.git.common.exceptions.WrongRefException;
import works.buddy.git.common.model.GitServer;
import works.buddy.jobs.InactiveWorkspaceTerminator;
import works.buddy.jobs.TerminatedWorkspacesCleaner;
import works.buddy.jobs.WorkspaceActivityJob;
import works.buddy.sso.GroupSyncSupervisor;
import works.buddy.sso.SSOManager;
import works.buddy.sso.SSOSynchronizationService;
import works.buddy.ws.api.authentication.entities.ApiClientLogoFront;
import works.buddy.ws.api.authentication.services.OAuth2TokenExpirationService;
import works.buddy.ws.api.authentication.services.PersonalTokenService;
import works.buddy.ws.api.authentication.view.model.AccessTokenFront;
import works.buddy.ws.api.authentication.view.model.AccessTokensFront;
import works.buddy.ws.api.authentication.view.model.ApiClientFront;
import works.buddy.ws.api.authentication.view.model.ApiClientsFront;
import works.buddy.ws.api.authentication.view.service.ApiClientViewService;
import works.buddy.ws.blacklist.services.MinerBlockingService;
import works.buddy.ws.common.access.entities.PermissionSet;
import works.buddy.ws.common.access.level.*;
import works.buddy.ws.common.access.services.PermissionSetService;
import works.buddy.ws.common.access.services.SshKeyService;
import works.buddy.ws.common.aggregator.services.AggregateDataService;
import works.buddy.ws.common.aggregator.view.model.AggregateDataFront;
import works.buddy.ws.common.aggregator.view.model.PermissionSetFront;
import works.buddy.ws.common.cache.DefaultEvictCacheService;
import works.buddy.ws.common.cache.EvictCacheService;
import works.buddy.ws.common.config.ForbiddenConstants;
import works.buddy.ws.common.email.Blacklist;
import works.buddy.ws.common.email.EmailFront;
import works.buddy.ws.common.email.SmtpTestFront;
import works.buddy.ws.common.email.SmtpTester;
import works.buddy.ws.common.entities.*;
import works.buddy.ws.common.exceptions.AccessException;
import works.buddy.ws.common.exceptions.CommonException;
import works.buddy.ws.common.exceptions.NotFoundException;
import works.buddy.ws.common.helpers.Secured;
import works.buddy.ws.common.helpers.SortType;
import works.buddy.ws.common.helpers.Standalone;
import works.buddy.ws.common.helpers.Validate;
import works.buddy.ws.common.services.ApiServerRegistry;
import works.buddy.ws.common.services.ProjectFrontService;
import works.buddy.ws.common.setup.services.ApplicationEnvironmentService;
import works.buddy.ws.common.view.model.ForbiddenNamesFront;
import works.buddy.ws.common.view.model.StringFront;
import works.buddy.ws.common.webhook.services.GitWebhookService;
import works.buddy.ws.common.webhook.view.model.GitWebhookRequestsFront;
import works.buddy.ws.detect.ProjectNatureDetector;
import works.buddy.ws.detect.TechStackDetector;
import works.buddy.ws.docker.services.DockerCleaner;
import works.buddy.ws.docker.services.DockerHubProxy;
import works.buddy.ws.docker.services.DockerImageService;
import works.buddy.ws.docker.view.model.DockerImageTagsFront;
import works.buddy.ws.docker.view.model.DockerImagesFront;
import works.buddy.ws.docker.view.model.DockerNetworksFront;
import works.buddy.ws.ec2.ServerInstanceManager;
import works.buddy.ws.ec2.services.RunnerViewService;
import works.buddy.ws.ec2.view.model.RunnerFront;
import works.buddy.ws.ec2.view.model.RunnerInfo;
import works.buddy.ws.ec2.view.model.RunnersFront;
import works.buddy.ws.feed.services.FeedService;
import works.buddy.ws.feed.view.model.FeedFront;
import works.buddy.ws.feed.view.model.FeedsFront;
import works.buddy.ws.feed.view.model.ReplyFront;
import works.buddy.ws.globalmessages.services.WorkspaceMessageService;
import works.buddy.ws.globalmessages.view.WorkspaceMessageFront;
import works.buddy.ws.globalmessages.view.WorkspaceMessagesFront;
import works.buddy.ws.integration.kubernetes.KubernetesService;
import works.buddy.ws.integration.services.IntegrationAccessService;
import works.buddy.ws.integration.services.IntegrationService;
import works.buddy.ws.integration.services.ProjectIntegrationService;
import works.buddy.ws.integration.services.project.query.ExternalEntitiesParams;
import works.buddy.ws.integration.telegram.TelegramClient;
import works.buddy.ws.integration.view.model.*;
import works.buddy.ws.job.entities.Job;
import works.buddy.ws.job.services.JobService;
import works.buddy.ws.job.view.model.JobFront;
import works.buddy.ws.marketplace.aws.model.AWSSubscriptionFront;
import works.buddy.ws.marketplace.aws.model.EntitlementUpdatedFront;
import works.buddy.ws.marketplace.aws.services.AWSMarketplaceService;
import works.buddy.ws.notifications.services.WebhookService;
import works.buddy.ws.notifications.view.model.WebhookFront;
import works.buddy.ws.notifications.view.model.WebhooksFront;
import works.buddy.ws.payment.services.*;
import works.buddy.ws.payment.view.model.*;
import works.buddy.ws.pipeline.action.android.services.AndroidActionService;
import works.buddy.ws.pipeline.action.android.view.AndroidTracksFront;
import works.buddy.ws.pipeline.action.build.services.BuildWorkspaceService;
import works.buddy.ws.pipeline.action.build.services.IntegrationActionService;
import works.buddy.ws.pipeline.action.build.view.model.ArtifactsAndStaticFilesFront;
import works.buddy.ws.pipeline.action.build.view.model.BuildWorkspaceEntry;
import works.buddy.ws.pipeline.action.build.view.model.DockerContainersFront;
import works.buddy.ws.pipeline.action.build.view.model.KubernetesActionFront;
import works.buddy.ws.pipeline.action.custom.services.CustomActionDefinitionService;
import works.buddy.ws.pipeline.action.custom.view.CustomActionDefinitionsFront;
import works.buddy.ws.pipeline.action.custom.view.CustomActionTypesFront;
import works.buddy.ws.pipeline.action.deployment.services.DeploymentActionService;
import works.buddy.ws.pipeline.action.deployment.services.PipelineUsageService;
import works.buddy.ws.pipeline.action.deployment.view.model.DeploymentActionFront;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacSignPropertyListSource;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.MacVersionsService;
import works.buddy.ws.pipeline.action.nativebuild.services.mac.XcodeProjectHelper;
import works.buddy.ws.pipeline.action.nativebuild.view.model.MacVersionsFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.NativeBuildActionFront;
import works.buddy.ws.pipeline.action.nativebuild.view.model.XcodeProjectDetailsFront;
import works.buddy.ws.pipeline.action.view.model.*;
import works.buddy.ws.pipeline.action.visual_tests.services.DefaultVisualTestsImageLoader;
import works.buddy.ws.pipeline.action.visual_tests.services.VisualTestsImageLoader;
import works.buddy.ws.pipeline.concurrent.ExecutionThreadManager;
import works.buddy.ws.pipeline.services.*;
import works.buddy.ws.pipeline.services.update.PipelineUpdater;
import works.buddy.ws.pipeline.view.model.*;
import works.buddy.ws.pipeline.yaml.services.MigrateVariablesService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlService;
import works.buddy.ws.pipeline.yaml.services.PipelineYamlUpdater;
import works.buddy.ws.pipeline.yaml.view.model.YamlReviewFront;
import works.buddy.ws.project.entities.Folder;
import works.buddy.ws.project.entities.Project;
import works.buddy.ws.project.entities.ProjectMember;
import works.buddy.ws.project.services.FolderService;
import works.buddy.ws.project.services.ProjectMembershipManager;
import works.buddy.ws.project.services.ProjectService;
import works.buddy.ws.project.view.*;
import works.buddy.ws.runner.services.RunnerService;
import works.buddy.ws.sandbox.playbook.*;
import works.buddy.ws.sandbox.routing.CustomDomainService;
import works.buddy.ws.sandbox.services.*;
import works.buddy.ws.sandbox.view.model.*;
import works.buddy.ws.scm.services.*;
import works.buddy.ws.scm.view.model.*;
import works.buddy.ws.tag.services.TagService;
import works.buddy.ws.tag.view.model.TagFront;
import works.buddy.ws.tag.view.model.TagsFront;
import works.buddy.ws.tag.view.model.UpdateTagFront;
import works.buddy.ws.transfer.entities.FileUpload;
import works.buddy.ws.transfer.services.UploadService;
import works.buddy.ws.user.entities.Avatar;
import works.buddy.ws.user.entities.User;
import works.buddy.ws.user.entities.Workspace;
import works.buddy.ws.user.entities.WorkspaceMember;
import works.buddy.ws.user.services.*;
import works.buddy.ws.user.view.model.*;
import works.buddy.ws.variables.services.VariableService;
import works.buddy.ws.variables.view.model.EnvironmentVariableFront;
import works.buddy.ws.variables.view.model.EnvironmentVariablesFront;
import works.buddy.ws.variables.view.model.VariablesFront;

import javax.ws.rs.core.Response;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.time.ZoneId;
import java.util.Collection;

import static works.buddy.ws.common.helpers.EntityUtils.getIds;
import static works.buddy.ws.common.helpers.EntityUtils.isTrue;
    @Override
    // security not required - internal use for es
    public Success deleteEc2Instance(String id) {
        serverInstanceManager.deleteInstance(id);
        for (GitServer gitServer : gitServerRegistry.getAllServers()) {
            gitServer.deleteEc2Instance(id);
        }
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Success updateEc2InstanceId(ServerInstanceIdUpdate update) {
        serverInstanceManager.updateInstanceId(update);
        return new Success();
    }

    @Override
    // security not required - internal use for es
    public Collection<ServerInstance> getEc2Instances() {
        return serverInstanceManager.getAllInstances();
    }

    @Override
    // security not required - for internal use
    public FeedsFront getLastFailedExecutions(Integer limit) {
        return executionService.getLastFailedExecutions(limit);
    }

    // Test API

    @Override
    @Secured(level = TokenAccessLevel.class)
    @Validate(validators = {IdValidator.class, StringValidator.class})
    public Success deleteRepositoryInDeveloperMode(Integer projectId, String token) throws AccessException, NotFoundException, CommonException {
        projectService.deleteRepositoryInDeveloperMode(projectId);
        return new Success();
    }

    @Override
    public Success testOutOfMemoryError() {
        internalNotificationService.sendOutOfMemoryRequest(new OutOfMemoryError("internal api test"));
        return new Success();
    }
}
